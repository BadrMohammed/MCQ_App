{"version":3,"sources":["Redux/Reducers/methods.js","Redux/Reducers/ExamReducer.js","Redux/Reducers/Index.js","Redux/Actions/types.js","Redux/Actions/GeneralActions.js","Components/Exam/Question.js","Components/Exam/Exam.js","Components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["updateProps","state","action","newState","i","payload","length","dotProp","set","prop","value","mergeProps","merge","deleteProps","delete","INITIAL_STATE","students","newName","questions","q","answrs","correct_answer","isRender","isRenderModal","isRenderTryModal","renderedQuestion","combineReducers","ExamR","type","general","key","Question","memo","props","questionTitle","ques","index","className","title","style","marginLeft","marginRight","fontWeight","answers","undefined","sort","Math","random","map","answer","indexes","display","checked","onChange","e","saveAnswer","renderAnswer","Exam","tryAgain","preventDefault","renderQuestions","items","floor","indexOf","item","filter","qu","onClick","handleYes","handleNo","history","push","this","toast","notify","position","duration","centered","closable","visible","onOk","onCancel","okText","cancelText","Component","connect","actions","Login","handleSave","onChaneName","afterClose","cancelButtonProps","disabled","placeholder","padding","borderRadius","target","store","createStore","reducers","compose","applyMiddleware","ReduxThunk","window","__REDUX_DEVTOOLS_EXTENSION__","App","exact","path","render","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qYAEaA,EAAc,SAACC,EAAOC,GAEjC,IADA,IAAIC,EAAWF,EACNG,EAAI,EAAGA,EAAIF,EAAOG,QAAQC,OAAQF,IACzCD,EAAWI,IAAQC,IACjBL,EACAD,EAAOG,QAAQD,GAAGK,KAClBP,EAAOG,QAAQD,GAAGM,OAGtB,OAAOP,GAEIQ,EAAa,SAACV,EAAOC,GAEhC,IADA,IAAIC,EAAWF,EACNG,EAAI,EAAGA,EAAIF,EAAOG,QAAQC,OAAQF,IACzCD,EAAWI,IAAQK,MACjBT,EACAD,EAAOG,QAAQD,GAAGK,KAClBP,EAAOG,QAAQD,GAAGM,OAGtB,OAAOP,GAEIU,EAAc,SAACZ,EAAOC,GAEjC,IADA,IAAIC,EAAWF,EACNG,EAAI,EAAGA,EAAIF,EAAOG,QAAQC,OAAQF,IACzCD,EAAWI,IAAQO,OAAOX,EAAUD,EAAOG,QAAQD,GAAGK,MAExD,OAAON,GCrBHY,EAAgB,CACpBC,SAAU,GACVC,QAAS,GACTC,UAAW,CACT,CACEC,EAAG,+BACHC,OAAQ,CAAC,QAAS,SAAU,SAAU,QAAS,UAE/CC,eAAgB,QAChBC,UAAU,GAEZ,CACEH,EAAG,6BACHC,OAAQ,CAAC,SAAU,SAAU,UAAW,QAAS,WACjDC,eAAgB,SAEhBC,UAAU,GAEZ,CACEH,EAAG,0BACHC,OAAQ,CACN,iBACA,YACA,WACA,iBACA,oBAEFC,eAAgB,iBAEhBC,UAAU,GAEZ,CACEH,EAAG,+CACHC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QACzCC,eAAgB,OAEhBC,UAAU,GAEZ,CACEH,EAAG,qCACHC,OAAQ,CAAC,UAAW,SAAU,WAAY,WAAY,YACtDC,eAAgB,SAEhBC,UAAU,IAIdC,eAAe,EACfC,kBAAkB,EAElBC,iBAAkB,ICvDLC,cAAgB,CAC7BC,MDyDa,WAAoC,IAAnC1B,EAAkC,uDAA1Bc,EAAeb,EAAW,uCAChD,OAAQA,EAAO0B,MACb,IE7D4B,mBF8D1B,OAAOC,EAAoB5B,EAAOC,GAEpC,IE/D2B,kBFgEzB,OAAO2B,EAAmB5B,EAAOC,GAEnC,IEjE4B,mBFkE1B,OAAO2B,EAAoB5B,EAAOC,GAEpC,QACE,OAAOD,M,gBGzEA4B,G,4BAAU,SAACxB,EAASyB,GAC/B,MAAO,CAAEF,KAAME,EAAKzB,a,iBC8DP0B,EAtBEC,gBAAK,SAAAC,GAAU,IACtBC,EAAwCD,EAAxCC,cAAeC,EAAyBF,EAAzBE,KAAMN,EAAmBI,EAAnBJ,QAASO,EAAUH,EAAVG,MACtC,OACE,yBAAKC,UAAU,yCACb,kBAAC,IAAD,CACEA,UAAU,OACVC,MAAM,wBACNC,MAAO,CACLC,WAAY,MACZC,YAAa,QAGf,6BACE,4BAAKP,GACL,uBAAGK,MAAO,CAAEG,WAAY,SAAWP,EAAKhB,GAvC7B,SAACwB,EAAStB,EAAgBQ,EAASO,GACtD,QAAgBQ,IAAZD,EAGF,OAFAA,EAAQE,MAAK,kBAAMC,KAAKC,SAAW,MAE5BJ,EAAQK,KAAI,SAACC,EAAQC,GAC1B,OACE,yBAAKb,UAAU,aAAaP,IAAKoB,EAASX,MAAO,CAAEY,QAAS,WAC1D,uBAAGZ,MAAO,CAAEY,QAAS,WACnB,+BACE,kBAAC,IAAD,CACEC,SAAS,EACTC,SAAU,SAAAC,GAAC,OAtBR,SAACL,EAAQ5B,EAAgBQ,EAASO,GACnDP,EACE,CAAC,CAAEpB,KAAM,aAAe2B,EAAQ,YAAa1B,OAAO,IFLxB,oBES5BmB,EADEoB,IAAW5B,EACL,CAAC,CAAEZ,KAAM,mBAAoBC,OAAO,IAEpC,CAAC,CAAED,KAAM,mBAAoBC,OAAO,IFVjB,mBEyBb6C,CAAWN,EAAQ5B,EAAgBQ,EAASO,IAE9C1B,MAAOuC,IANX,QAQUA,GATZ,gBAiCCO,CAAarB,EAAKf,OAAQe,EAAKd,eAAgBQ,EAASO,S,yBChD7DqB,E,4MAcJC,SAAW,SAAAJ,GAAK,IAENzB,EAAY,EAAKI,MAAjBJ,QACRyB,EAAEK,iBACF9B,EAAQ,CAAC,CAAEpB,KAAM,mBAAoBC,OAAO,IHxBhB,qB,EG0B9BkD,gBAAkB,WAIhB,IAJuB,IAAD,EAC2B,EAAK3B,MAA9CR,EADc,EACdA,iBAAkBP,EADJ,EACIA,UAAWW,EADf,EACeA,QACjCgC,EAAQ,EAELA,GAAS,GAAG,CACjBA,GAAgB,EAEhB,IAAI1B,EAAOjB,EAAU4B,KAAKgB,MAAMhB,KAAKC,SAAW7B,EAAUZ,SAEtD8B,EAAQlB,EACT8B,KAAI,SAASM,GACZ,OAAOA,EAAEjC,kBAEV0C,QAAQ5B,EAAKd,gBAChB,IAAsB,IAAlBc,EAAKb,SACP,OACE,kBAAC,EAAD,CACEY,cAAe,cAAgBT,EAAiBnB,OAAS,GACzD6B,KAAMA,EACNN,QAASA,EACTO,MAAOA,IAKf,GAAgC,IAA5BX,EAAiBnB,OAAc,CACjCuD,EAAQ,EACR,IAAIG,EAAOvC,EAAiBwC,QAAO,SAAAC,GAAE,OAAW,IAAPA,KACzC,OACE,yBAAK7B,UAAU,yCACb,kBAAC,IAAD,CACEA,UAAU,OACVC,MAAM,wBACNC,MAAO,CACLC,WAAY,MACZC,YAAa,QAGf,6BACE,4BAAK,kBAAoBuB,EAAK1D,QAC9B,kBAAC,IAAD,CAAQ+B,UAAU,UAAU8B,QAAS,SAAAb,GAAC,OAAI,EAAKI,SAASJ,KAAxD,aAGA,kBAAC,IAAD,CACEjB,UAAU,UACV8B,QAAS,SAAAb,GAAC,OAAI,EAAKI,SAASJ,W,EAQ1Cc,UAAY,WAAO,IAAD,EACe,EAAKnC,MAA5BJ,EADQ,EACRA,QADQ,EACCX,UACP8B,KAAI,SAACkB,EAAI9B,GACjBP,EACE,CAAC,CAAEpB,KAAM,aAAe2B,EAAQ,YAAa1B,OAAO,IHnF5B,uBGuF5BmB,EACE,CACE,CAAEpB,KAAM,mBAAoBC,MAAO,IACnC,CAAED,KAAM,mBAAoBC,OAAO,IH1FX,qB,EGgG9B2D,SAAW,WAAO,IAAD,EACc,EAAKpC,MAA1BqC,EADO,EACPA,QAASzC,EADF,EACEA,QACjB,EAAKuC,YACLvC,EACE,CACE,CAAEpB,KAAM,UAAWC,MAAO,IAC1B,CAAED,KAAM,gBAAiBC,OAAO,IHtGR,oBG2G5B4D,EAAQC,KAAK,M,kEAlGc,KAAvBC,KAAKvC,MAAMhB,UACbwD,IAAMC,OACJ,mEACA,CACEC,SAAU,YACVC,SAAU,MAGdJ,KAAKvC,MAAMqC,QAAQC,KAAK,Q,+BA4FlB,IAAD,EAC+BC,KAAKvC,MAAnChB,EADD,EACCA,QAASO,EADV,EACUA,iBACjB,OACE,gCACe,KAAZP,EAAiBuD,KAAKZ,kBAAoB,KAE3C,kBAAC,IAAD,CACEiB,UAAU,EACVC,UAAU,EACVxC,MAAM,kBACNyC,QAASvD,EACTwD,KAAMR,KAAKJ,UACXa,SAAUT,KAAKH,SACfa,OAAO,MACPC,WAAW,MAEX,wD,GAvHSC,aAyIJC,eAXS,SAAC,GAAe,IAAb1D,EAAY,EAAZA,MACzB,MAAO,CACLT,UAAWS,EAAMT,UAEjBF,SAAUW,EAAMX,SAChBS,iBAAkBE,EAAMF,iBACxBR,QAASU,EAAMV,QACfO,iBAAkBG,EAAMH,oBAIY8D,EAAzBD,CAAkC5B,G,SC1I3C8B,E,4MACJC,WAAa,SAAAlC,GAAM,IAAD,EACa,EAAKrB,MAA1BhB,EADQ,EACRA,QAASY,EADD,EACCA,QACjByB,EAAEK,iBAEc,KAAZ1C,EACFwD,IAAMC,OAAO,yBAA0B,CACrCC,SAAU,YACVC,SAAU,MAGZ/C,EAAQ,CAAC,CAAEpB,KAAM,gBAAiBC,OAAO,IJhBf,qB,EIoB9B+E,YAAc,SAAA/E,GAAU,IACdmB,EAAY,EAAKI,MAAjBJ,QAERA,EAAQ,CAAC,CAAEpB,KAAM,UAAWC,MAAOA,IJvBP,oBIwB5BmB,EAAQ,CAAC,CAAEpB,KAAM,WAAYC,MAAOA,IJvBT,oB,EIyB7BgF,WAAa,WACS,EAAKzD,MAAjBqC,QACAC,KAAK,S,uDAEL,IAAD,OACCtD,EAAYuD,KAAKvC,MAAjBhB,QACAM,EAAkBiD,KAAKvC,MAAvBV,cACR,OACE,kBAAC,IAAD,CACEsD,UAAU,EACVC,UAAU,EACVxC,MAAM,kBACNyC,QAASxD,EACTyD,KAAMR,KAAKgB,WACXG,kBAAmB,CAAEC,UAAU,GAC/BF,WAAYlB,KAAKkB,WACjBR,OAAO,QAEP,kBAAC,IAAD,CACEW,YAAY,oBACZtD,MAAO,CAAEuD,QAAS,OAAQC,aAAc,QACxCrF,MAAOO,EACPoC,SAAU,SAAAC,GAAC,OAAI,EAAKmC,YAAYnC,EAAE0C,OAAOtF,e,GA3C/B0E,aAyDLC,eAPS,SAAC,GAAe,IAAb1D,EAAY,EAAZA,MACzB,MAAO,CACLJ,cAAeI,EAAMJ,cACrBN,QAASU,EAAMV,WAIqBqE,EAAzBD,CAAkCE,GCjD3CU,EAAQC,YACZC,EACA,GACAC,YACEC,YAAgBC,KAChBC,OAAOC,8BAAgCD,OAAOC,iCAkBnCC,E,uKAbX,OACE,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA3E,GAAK,OAAI,kBAAC,EAAUA,MAClD,kBAAC,IAAD,CAAOyE,OAAK,EAACC,KAAK,OAAOC,OAAQ,SAAA3E,GAAK,OAAI,kBAAC,EAASA,a,GAP9CmD,aCXEyB,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.117a7e6c.chunk.js","sourcesContent":["import dotProp from \"dot-prop-immutable\";\r\n\r\nexport const updateProps = (state, action) => {\r\n  let newState = state;\r\n  for (let i = 0; i < action.payload.length; i++) {\r\n    newState = dotProp.set(\r\n      newState,\r\n      action.payload[i].prop,\r\n      action.payload[i].value\r\n    );\r\n  }\r\n  return newState;\r\n};\r\nexport const mergeProps = (state, action) => {\r\n  let newState = state;\r\n  for (let i = 0; i < action.payload.length; i++) {\r\n    newState = dotProp.merge(\r\n      newState,\r\n      action.payload[i].prop,\r\n      action.payload[i].value\r\n    );\r\n  }\r\n  return newState;\r\n};\r\nexport const deleteProps = (state, action) => {\r\n  let newState = state;\r\n  for (let i = 0; i < action.payload.length; i++) {\r\n    newState = dotProp.delete(newState, action.payload[i].prop);\r\n  }\r\n  return newState;\r\n};\r\n","import {\r\n  UPDATE_EXAM_PROP,\r\n  MERGE_EXAM_PROP,\r\n  DELETE_EXAM_PROP\r\n} from \"../Actions/types\";\r\n\r\nimport * as general from \"./methods\";\r\n\r\nconst INITIAL_STATE = {\r\n  students: [],\r\n  newName: \"\",\r\n  questions: [\r\n    {\r\n      q: \"What is the Capital of Egypt\",\r\n      answrs: [\"Cairo\", \"Beirut\", \"Riyadh\", \"Dubai\", \"London\"],\r\n\r\n      correct_answer: \"Cairo\",\r\n      isRender: false\r\n    },\r\n    {\r\n      q: \"Who won the last World Cup\",\r\n      answrs: [\"France\", \"Brazil\", \"Germany\", \"Italy\", \"Austria\"],\r\n      correct_answer: \"France\",\r\n\r\n      isRender: false\r\n    },\r\n    {\r\n      q: \"Who won the Nobel Prize\",\r\n      answrs: [\r\n        \"Naguib Mahfouz\",\r\n        \"Adel Emam\",\r\n        \"Amr diab\",\r\n        \"Omar el-shiref\",\r\n        \"Hussien El-Jasmy\"\r\n      ],\r\n      correct_answer: \"Naguib Mahfouz\",\r\n\r\n      isRender: false\r\n    },\r\n    {\r\n      q: \"In what year Egypt won the nations of Africa\",\r\n      answrs: [\"2013\", \"2010\", \"2015\", \"2007\", \"2003\"],\r\n      correct_answer: \"2010\",\r\n\r\n      isRender: false\r\n    },\r\n    {\r\n      q: \"Who discovered the Earth's gravity\",\r\n      answrs: [\"Richard\", \"Newton\", \"Van dizl\", \"Da Vinci\", \"Einstein\"],\r\n      correct_answer: \"Newton\",\r\n\r\n      isRender: false\r\n    }\r\n  ],\r\n\r\n  isRenderModal: true,\r\n  isRenderTryModal: false,\r\n\r\n  renderedQuestion: []\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_EXAM_PROP: {\r\n      return general.updateProps(state, action);\r\n    }\r\n    case MERGE_EXAM_PROP: {\r\n      return general.mergeProps(state, action);\r\n    }\r\n    case DELETE_EXAM_PROP: {\r\n      return general.deleteProps(state, action);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport ExamReducer from \"./ExamReducer\";\r\n\r\nexport default combineReducers({\r\n  ExamR: ExamReducer\r\n});\r\n","// Exam\r\n\r\nexport const UPDATE_EXAM_PROP = \"UPDATE_EXAM_PROP\";\r\nexport const MERGE_EXAM_PROP = \"MERGE_EXAM_PROP\";\r\nexport const DELETE_EXAM_PROP = \"DELETE_EXAM_PROP\";\r\n","export const general = (payload, key) => {\r\n  return { type: key, payload };\r\n};\r\n","import React, { memo } from \"react\";\r\nimport { MERGE_EXAM_PROP, UPDATE_EXAM_PROP } from \"../../Redux/Actions/types\";\r\nimport Checkbox from \"rc-checkbox\";\r\nimport { Card } from \"antd\";\r\n\r\nconst saveAnswer = (answer, correct_answer, general, index) => {\r\n  general(\r\n    [{ prop: \"questions.\" + index + \".isRender\", value: true }],\r\n    UPDATE_EXAM_PROP\r\n  );\r\n  if (answer === correct_answer) {\r\n    general([{ prop: \"renderedQuestion\", value: true }], MERGE_EXAM_PROP);\r\n  } else {\r\n    general([{ prop: \"renderedQuestion\", value: false }], MERGE_EXAM_PROP);\r\n  }\r\n};\r\nconst renderAnswer = (answers, correct_answer, general, index) => {\r\n  if (answers !== undefined) {\r\n    answers.sort(() => Math.random() - 0.5); // arrange array randomly\r\n\r\n    return answers.map((answer, indexes) => {\r\n      return (\r\n        <div className=\"form-check\" key={indexes} style={{ display: \"inline\" }}>\r\n          <p style={{ display: \"inline\" }}>\r\n            <label>\r\n              <Checkbox\r\n                checked={false}\r\n                onChange={e =>\r\n                  saveAnswer(answer, correct_answer, general, index)\r\n                }\r\n                value={answer}\r\n              />\r\n              &nbsp; {answer}\r\n            </label>\r\n            &nbsp;&nbsp;\r\n          </p>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n};\r\nconst Question = memo(props => {\r\n  const { questionTitle, ques, general, index } = props;\r\n  return (\r\n    <div className=\"text-align mt-5  ml-5 mr-5 wrapperDiv\">\r\n      <Card\r\n        className=\"mt-5\"\r\n        title=\"Select Correct Answer\"\r\n        style={{\r\n          marginLeft: \"20%\",\r\n          marginRight: \"20%\"\r\n        }}\r\n      >\r\n        <div>\r\n          <h2>{questionTitle}</h2>\r\n          <p style={{ fontWeight: \"bold\" }}>{ques.q}</p>\r\n          {renderAnswer(ques.answrs, ques.correct_answer, general, index)}\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Question;\r\n","import React, { Component } from \"react\";\r\nimport * as actions from \"../../Redux/Actions/Index\";\r\nimport { connect } from \"react-redux\";\r\nimport Question from \"./Question\";\r\nimport toast from \"toasted-notes\";\r\nimport { Card, Button, Modal } from \"antd\";\r\nimport { UPDATE_EXAM_PROP } from \"../../Redux/Actions/types\";\r\n\r\nclass Exam extends Component {\r\n  componentDidMount() {\r\n    // in case of page refresh and current page is mcq so will automitcally go to login page\r\n    if (this.props.newName === \"\") {\r\n      toast.notify(\r\n        \"your Name is Empty due to page refresh ,  please disply it again\",\r\n        {\r\n          position: \"top-right\",\r\n          duration: 3000\r\n        }\r\n      );\r\n      this.props.history.push(\"/\");\r\n    }\r\n  }\r\n  tryAgain = e => {\r\n    //to open modal that ask you to use same name or another\r\n    const { general } = this.props;\r\n    e.preventDefault();\r\n    general([{ prop: \"isRenderTryModal\", value: true }], UPDATE_EXAM_PROP);\r\n  };\r\n  renderQuestions = () => {\r\n    const { renderedQuestion, questions, general } = this.props;\r\n    var items = 5;\r\n\r\n    while (items >= 0) {\r\n      items = items - 1;\r\n\r\n      let ques = questions[Math.floor(Math.random() * questions.length)];\r\n\r\n      let index = questions\r\n        .map(function(e) {\r\n          return e.correct_answer;\r\n        })\r\n        .indexOf(ques.correct_answer);\r\n      if (ques.isRender === false) {\r\n        return (\r\n          <Question\r\n            questionTitle={\"Question \" + (+renderedQuestion.length + 1)}\r\n            ques={ques}\r\n            general={general}\r\n            index={index}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    if (renderedQuestion.length === 5) {\r\n      items = 5;\r\n      let item = renderedQuestion.filter(qu => qu === true);\r\n      return (\r\n        <div className=\"text-align mt-5  ml-5 mr-5 wrapperDiv\">\r\n          <Card\r\n            className=\"mt-5\"\r\n            title=\"Select Correct Answer\"\r\n            style={{\r\n              marginLeft: \"20%\",\r\n              marginRight: \"20%\"\r\n            }}\r\n          >\r\n            <div>\r\n              <h2>{\"your result is \" + item.length}</h2>\r\n              <Button className=\"btn-try\" onClick={e => this.tryAgain(e)}>\r\n                Try Again\r\n              </Button>\r\n              <Button\r\n                className=\"btn-try\"\r\n                onClick={e => this.tryAgain(e)}\r\n              ></Button>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n  handleYes = () => {\r\n    const { general, questions } = this.props;\r\n    questions.map((qu, index) => {\r\n      general(\r\n        [{ prop: \"questions.\" + index + \".isRender\", value: false }],\r\n        UPDATE_EXAM_PROP\r\n      );\r\n    });\r\n    general(\r\n      [\r\n        { prop: \"renderedQuestion\", value: [] },\r\n        { prop: \"isRenderTryModal\", value: false }\r\n      ],\r\n      UPDATE_EXAM_PROP\r\n    );\r\n  };\r\n\r\n  handleNo = () => {\r\n    const { history, general } = this.props;\r\n    this.handleYes();\r\n    general(\r\n      [\r\n        { prop: \"newName\", value: \"\" },\r\n        { prop: \"isRenderModal\", value: true }\r\n      ],\r\n      UPDATE_EXAM_PROP\r\n    );\r\n\r\n    history.push(\"/\");\r\n  };\r\n  render() {\r\n    const { newName, isRenderTryModal } = this.props;\r\n    return (\r\n      <center>\r\n        {newName !== \"\" ? this.renderQuestions() : null}\r\n\r\n        <Modal\r\n          centered={true}\r\n          closable={false}\r\n          title=\"Enter your Name\"\r\n          visible={isRenderTryModal}\r\n          onOk={this.handleYes}\r\n          onCancel={this.handleNo}\r\n          okText=\"Yes\"\r\n          cancelText=\"No\"\r\n        >\r\n          <h3>try with Same Name</h3>\r\n        </Modal>\r\n      </center>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ ExamR }) => {\r\n  return {\r\n    questions: ExamR.questions,\r\n\r\n    students: ExamR.students,\r\n    renderedQuestion: ExamR.renderedQuestion,\r\n    newName: ExamR.newName,\r\n    isRenderTryModal: ExamR.isRenderTryModal\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(Exam);\r\n","import React, { Component } from \"react\";\r\nimport * as actions from \"../../Redux/Actions/Index\";\r\nimport { connect } from \"react-redux\";\r\nimport { MERGE_EXAM_PROP, UPDATE_EXAM_PROP } from \"../../Redux/Actions/types\";\r\nimport { Modal, Input } from \"antd\";\r\nimport toast from \"toasted-notes\";\r\n\r\nclass Login extends Component {\r\n  handleSave = e => {\r\n    const { newName, general } = this.props;\r\n    e.preventDefault();\r\n\r\n    if (newName === \"\") {\r\n      toast.notify(\"Please Enter your Name\", {\r\n        position: \"top-right\",\r\n        duration: 2000\r\n      });\r\n    } else {\r\n      general([{ prop: \"isRenderModal\", value: false }], UPDATE_EXAM_PROP);\r\n    }\r\n  };\r\n\r\n  onChaneName = value => {\r\n    const { general } = this.props;\r\n\r\n    general([{ prop: \"newName\", value: value }], UPDATE_EXAM_PROP);\r\n    general([{ prop: \"students\", value: value }], MERGE_EXAM_PROP);\r\n  };\r\n  afterClose = () => {\r\n    const { history } = this.props;\r\n    history.push(\"/mcq\");\r\n  };\r\n  render() {\r\n    const { newName } = this.props;\r\n    const { isRenderModal } = this.props;\r\n    return (\r\n      <Modal\r\n        centered={true}\r\n        closable={false}\r\n        title=\"Enter your Name\"\r\n        visible={isRenderModal}\r\n        onOk={this.handleSave}\r\n        cancelButtonProps={{ disabled: true }}\r\n        afterClose={this.afterClose}\r\n        okText=\"Save\"\r\n      >\r\n        <Input\r\n          placeholder=\"input placeholder\"\r\n          style={{ padding: \"10px\", borderRadius: \"10px\" }}\r\n          value={newName}\r\n          onChange={e => this.onChaneName(e.target.value)}\r\n        />\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ ExamR }) => {\r\n  return {\r\n    isRenderModal: ExamR.isRenderModal,\r\n    newName: ExamR.newName\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(Login);\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport reducers from \"./Redux/Reducers/Index\";\nimport { Provider } from \"react-redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport \"antd/dist/antd.css\";\nimport \"rc-checkbox/assets/index.css\";\nimport \"toasted-notes/src/styles.css\";\nimport \"../src/assets/style.css\";\n\nimport Exam from \"./Components/Exam/Exam\";\nimport Login from \"./Components/Login/Login\";\n\nconst store = createStore(\n  reducers,\n  {},\n  compose(\n    applyMiddleware(ReduxThunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <Switch>\n            <Route exact path=\"/\" render={props => <Login {...props} />} />\n            <Route exact path=\"/mcq\" render={props => <Exam {...props} />} />\n          </Switch>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}